{
	"info": {
		"_postman_id": "6acc1cfd-e890-4cf1-994f-bef39d8b1eca",
		"name": "WebDevelopment.v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27488675",
		"_collection_link": "https://dark-meadow-938498.postman.co/workspace/My-Workspace~84a6d51f-7fdd-4a58-8bda-93d6c04eaf3c/collection/27488675-6acc1cfd-e890-4cf1-994f-bef39d8b1eca?action=share&source=collection_link&creator=27488675"
	},
	"item": [
		{
			"name": "Ingredients",
			"item": [
				{
					"name": "get collection Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code to be 200.', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Name field is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"\r",
									"    responseData.forEach(function (ingredient) {\r",
									"        pm.expect(ingredient.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name field should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/ingredients",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid objectid Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code to be 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Valid message text in response', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.eql('Invaild given id.')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/ingredients/3434",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ingredients",
								"3434"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post new Ingredient Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('respose code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response to be json oject', () => {\r",
									"    pm.response.to.be.json;\r",
									"    const response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ingredientId\", response._id);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"tomato\",\r\n    \"unit_of_measurement\": \"cup\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ingredients",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a sepecific ingredient Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('get the already created ingredient', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Id matches.', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response._id).to.eql(pm.collectionVariables.get('ingredientId'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/ingredients/{{ingredientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ingredients",
								"{{ingredientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify specific ingredient Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Updating a document response code to be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Updated document matches the new values', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"onion\");\r",
									"    pm.expect(response.unit_of_measurement).to.eql(\"cup\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"onion\",\r\n    \"unit_of_measurement\": \"cup\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ingredients/{{ingredientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ingredients",
								"{{ingredientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a specific ingredient Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Delete the existing document', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/ingredients/{{ingredientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ingredients",
								"{{ingredientId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authors",
			"item": [
				{
					"name": "GET collection Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 200 response status code.', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array.\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/authors",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "No available user with given id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Can't register a author with no user available with given email\", () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(responseBody.message).to.equals(\"No user was found with given email.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"noCorrespondinguser@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/authors",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post a new user Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Creating a new User to test the creation of new Author in the next test', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    pm.collectionVariables.set('userId', response._id);\r",
									"    pm.collectionVariables.set('x-access-token', response.token)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"newUser\",\r\n    \"email\": \"newUser@gmail.com\",\r\n    \"password\": \"myPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post a new author Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Posting a new Author status code to be 201.', () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.collectionVariables.set(\"authorId\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"newUser@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/authors",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific author Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response to be an json', () => {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{x-access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/authors/{{authorId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"authors",
								"{{authorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "specificId Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/authors/{{authorId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"authors",
								"{{authorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the created user Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code to be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get a users collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Code status 200.', () => {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Response to be a json file', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.collectionVariables.set('userId', response._id);\r",
									"    pm.collectionVariables.set('x-access-token', response.token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"newUser\",\r\n    \"email\": \"newUser@gmail.com\",\r\n    \"password\": \"newPassforUser\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a specific id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response to be json', () => {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{x-access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/users/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change user's email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Email has been updated successfully', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.email).to.eql('alternativeEmail@gmail.com');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{x-access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"alternativeEmail@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response to be json file', () => {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recipe",
			"item": [
				{
					"name": "get recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"}); */\r",
									"// Check if the response status code is 200 (OK)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if the response body is an array of recipes (assuming your API returns an array)\r",
									"pm.test(\"Response body is an array of recipes\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/recipes/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"recipes",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Post new Ingredient Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('respose code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response to be json oject', () => {\r",
									"    pm.response.to.be.json;\r",
									"    const response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ingredientId2\", response._id);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"tomato\",\r\n    \"unit_of_measurement\": \"cup\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ingredients",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "post a new ingredient2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('respose code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response to be json oject', () => {\r",
									"    pm.response.to.be.json;\r",
									"    const response = pm.response.json();\r",
									"    pm.collectionVariables.set(\"ingredientId3\", response._id);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"baking powder\",\r\n    \"unit_of_measurement\": \"grams\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ingredients",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ingredients"
							]
						}
					},
					"response": []
				},
				{
					"name": "post a new recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('respose code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response to be json oject', () => {\r",
									"    pm.response.to.be.json;\r",
									"    const response = pm.response.json();\r",
									"     pm.collectionVariables.set(\"recipeId\", response._id);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"New Recipe\",\r\n    \"information\": \"This is a new recipe.\",\r\n    \"nutrition_information\": \"Nutritional information here\",\r\n    \"list_of_ingredients\": [\r\n        {\r\n            \"ingredient\": \"tomato\",\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/recipes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "post a new recipe 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('respose code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response to be json oject', () => {\r",
									"    pm.response.to.be.json;\r",
									"    const response = pm.response.json();\r",
									"     pm.collectionVariables.set(\"recipeId2\", response._id);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"cake\",\r\n    \"information\": \"This is a new recipe.\",\r\n    \"nutrition_information\": \"Nutritional information here\",\r\n    \"list_of_ingredients\": [\r\n        {\r\n            \"ingredient\": \"baking powder\",\r\n            \"quantity\": 10\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/recipes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "get a specific recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('get the already created ingredient', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Id matches.', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response._id).to.eql(pm.collectionVariables.get('recipeId'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/recipes/{{recipeId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "change recipe name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"tomato juice\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/recipes/{{recipeId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "change a recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Updating a document response code to be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Updated document matches the new values', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"orange cake\");\r",
									"    pm.expect(response.information).to.eql(\"This is an orange cake recipe.\");\r",
									"    pm.expect(response.nutrition_information).to.eql(\"high in fat\");\r",
									"    pm.expect(response.list_of_ingredients[0].quantity).to.eql(11);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange cake\",\r\n    \"information\": \"This is an orange cake recipe.\",\r\n    \"nutrition_information\": \"high in fat\",\r\n    \"list_of_ingredients\": [\r\n        {\r\n            \"ingredient\": \"tomato\",\r\n            \"quantity\": 11\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/recipes/{{recipeId2}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"recipes",
								"{{recipeId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a specific recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/recipes/{{recipeId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "ingredientId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "authorId",
			"value": ""
		},
		{
			"key": "recipeId",
			"value": ""
		},
		{
			"key": "ingredientId2",
			"value": ""
		},
		{
			"key": "ingredientId3",
			"value": ""
		},
		{
			"key": "recipeId2",
			"value": ""
		},
		{
			"key": "x-access-token",
			"value": "",
			"type": "string"
		}
	]
}